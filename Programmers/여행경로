import java.util.*;

class Solution {
    static Map<String, List<String>> map;
    static int len;
    static boolean flag = false;
    static List<String> ans = new ArrayList<String>();
    public String[] solution(String[][] tickets) {
        //알파벳 대문자 3글자, ICN 시작
        //공항 수 tickets.length 는 3~10_000
        //a,b는 a에서 b로 갈 수 있음
        //주어진 모든 경로 지나야함
        //알파벳 순, 정렬 해야할 듯
        
        map = new HashMap<>();
        len = tickets.length;
        
        for(int i=0; i<len; i++){
            String [] now = tickets[i];
            String st = now[0];
            String ed = now[1];
            List<String> st_list = map.getOrDefault(st,new ArrayList<>());
            st_list.add(ed);
            map.put(st,st_list);
        }
        for(List<String> list : map.values()){
            Collections.sort(list);
        }
        ans.add("ICN");
        dfs(0,"ICN");
        String [] answer = new String [ans.size()];
        for(int i=0; i<ans.size();i++){
        answer[i] = ans.get(i);
        }
        return answer;
    }
    void dfs(int depth, String st){
        if(depth==len){
            flag = true;
            
            return;
        }
        
        
        List<String> list = map.get(st);
        if(list == null || list.size()==0) return;
        for(int i=0; i <list.size(); i++){
            String now = map.get(st).get(i);
            map.get(st).remove(i);
            ans.add(now);
            dfs(depth+1,now);
            if(flag) return;
            ans.remove(ans.size()-1);
            map.get(st).add(now);
            Collections.sort(map.get(st));
        }
        
    }
}
